initSidebarItems({"mod":[["arena","Arena allocator inspired by LuaJIT's new GC."],["noop","No-op Garbage Collector. This implementation doesn't collect garbage at all, so it is very simple: Neither Finalizers nor `Drop` glue needs to run, Weak references can be ignored (they will always be valid) and the collection methods do nothing."],["string","Immutable string type used by the VM"]],"struct":[["TracedRef","Traced reference to an object owned by the GC. This is inherently unsafe. May be stored in traced structs, which will keep the referenced object alive. Cannot outlive the GC that owns the object."]],"trait":[["GcCallback","Contains methods called on various GC events. Must be implemented by the GC user and can specify application-specific behaviour."],["GcStrategy","Trait for Garbage Collector implementations."],["Traceable","A GC-managed object that may reference other GC-managed objects and keep them alive. Provides a `trace` method that will be invoked by the GC to trace these references."],["Tracer","A `Tracer` provides methods to mark objects as reachable. A `GcStrategy` will pass an object that implements `Tracer` to the `trace` method of all `Traceable` and reachable objects."]],"type":[["DefaultGc","The recommended allocator. May change without further notice."]]});